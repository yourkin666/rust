// 定义一个 trait 用于计算面积
trait AreaCalculable {
    fn area(&self) -> f64;
}

// 定义圆形结构体
struct Circle {
    radius: f64,
}

// 实现圆形的面积计算
impl AreaCalculable for Circle {
    fn area(&self) -> f64 {
        std::f64::consts::PI * self.radius * self.radius
    }
}

// 定义三角形结构体
struct Triangle {
    base: f64,
    height: f64,
}

// 实现三角形的面积计算
impl AreaCalculable for Triangle {
    fn area(&self) -> f64 {
        0.5 * self.base * self.height
    }
}

// 定义正方形结构体
struct Square {
    side: f64,
}

// 实现正方形的面积计算
impl AreaCalculable for Square {
    fn area(&self) -> f64 {
        self.side * self.side
    }
}

// 打印图形的面积
fn print_area<T: AreaCalculable>(shape: T) {
    println!("图形的面积是: {}", shape.area());
}

fn main() {
    let circle = Circle { radius: 5.0 };
    let triangle = Triangle { base: 3.0, height: 4.0 };
    let square = Square { side: 6.0 };

    print_area(circle);
    print_area(triangle);
    print_area(square);
}
